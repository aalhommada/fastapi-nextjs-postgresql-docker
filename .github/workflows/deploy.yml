name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to DigitalOcean
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << 'EOF'
          # Navigate to the project directory
          cd /root/fastapi-nextjs-postgresql-docker || {
            echo "Project directory not found. Cloning repository..."
            git clone https://github.com/aalhommada/fastapi-nextjs-postgresql-docker.git
            cd /root/fastapi-nextjs-postgresql-docker
          }
          
          # Pull latest changes
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          # Stop existing containers (gracefully)
          echo "Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down --remove-orphans || true
          
          # Clean up unused Docker resources
          echo "Cleaning up Docker resources..."
          docker system prune -f
          
          # Build and start containers with production config
          echo "Building and starting containers..."
          docker-compose -f docker-compose.prod.yml up --build -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if services are running
          echo "Checking service status..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Test the application
          echo "Testing application endpoints..."
          curl -f http://localhost:8000/health || echo "Backend health check failed"
          curl -f http://localhost:3000 || echo "Frontend check failed"
          
          echo "Deployment completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 10
        
        # Test the live application
        curl -f http://${{ secrets.DROPLET_IP }}:8000/health || echo "Remote backend health check failed"
        curl -f http://${{ secrets.DROPLET_IP }}:3000 || echo "Remote frontend check failed"
        
        echo "Deployment verification completed!"