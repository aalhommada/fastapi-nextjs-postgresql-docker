name: Auto-Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DROPLET_IP: 165.232.86.188
  APP_PATH: /opt/app/fastapi-nextjs-postgresql-docker

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          set -e  # Exit on any error
          
          echo "🚀 Starting deployment..."
          
          # Navigate to app directory
          cd ${{ env.APP_PATH }}
          
          # Pull latest changes from GitHub
          echo "📥 Pulling latest changes..."
          git pull origin main
          
          # Stop existing containers gracefully
          echo "🛑 Stopping existing containers..."
          docker-compose down --timeout 30
          
          # Clean up old images and containers
          echo "🧹 Cleaning up old images..."
          docker system prune -f --volumes
          
          # Build new images
          echo "🔨 Building new images..."
          docker-compose build --no-cache --parallel
          
          # Start services
          echo "🚀 Starting services..."
          docker-compose up -d
          
          # Wait for services to be healthy
          echo "⏳ Waiting for services to be ready..."
          timeout=300  # 5 minutes
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            if docker-compose ps | grep -q "healthy"; then
              echo "✅ Services are healthy!"
              break
            fi
            sleep 10
            elapsed=$((elapsed + 10))
            echo "⏳ Waiting... (${elapsed}s)"
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "❌ Services failed to become healthy within timeout"
            docker-compose logs
            exit 1
          fi
          
          # Final status check
          echo "📊 Final status check..."
          docker-compose ps
          
          # Test endpoints
          echo "🔍 Testing endpoints..."
          sleep 5
          
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker-compose logs backend
            exit 1
          fi
          
          echo ""
          echo "🎉 Deployment completed successfully!"
          echo "🔗 Backend API: http://${{ env.DROPLET_IP }}:8000"
          echo "📋 API Docs: http://${{ env.DROPLET_IP }}:8000/docs"
          echo "🕐 Deployment time: $(date)"
          
          # Clean up old images after successful deployment
          docker image prune -f